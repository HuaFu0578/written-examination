//题目描述
//请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。
//解题思路：判断是不是对称的，如果是对称的有什么特征：如果一个二叉树是对称的，那么它同此其自身镜像是同样的：也就是如果将这个树再拷贝一份，也就是两个一样的待检测树，那么一棵树的根节点应该和另一棵树的根节点一样，一棵树的根节点的左结点和另一棵树根节点的右节点相同，一棵树根节点的右节点和另一棵树根节点的左结点相同，简而言之：左子树的左子树和右子树的右子树相同，左子树的右子树和右子树的左子树相同即可，采用递归
function isSymmetrical(pRoot)
{
    return adjust(pRoot,pRoot);//影分身之术，为了利用镜像的思路求解
}
function adjust(tree1,tree2){                  //这个函数就是用来判断两个元素是否镜像相等，如果相等就是对称的。
    if(!tree1&&!tree2) return true;          //两个节点都为空，或者理解为某个节点没有叶子节点，光杆司令相同
    if(!tree1||!tree2) return false;        //两个节点有一个为空，和自己的影子不一样了，返回false
    if(tree1.val!=tree2.val)return false; //两个节点都不为空，但是两个节点的值不同，和自己的影子也不一样了
    return adjust(tree1.left,tree2.right)&&adjust(tree1.right,tree2.left);  //一层一层的挖下去，根据节点比较，看看和自己的影子是否完全一样
}
